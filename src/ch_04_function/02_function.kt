package ch_04_function

/**
 * fileName       : `02_function`
 * date           : 2024-04-09
 * time           : 오후 2:18
 * ===========================================================
 * description    :
 */
fun main() {
    /**
     *  코틀린 함수
     *  함수는 `fun` 이라는 키워드로 정의.
     *  반환값이 있는 함수는 내부에서 `return` 으로 값을 반환.
     *  함수를 정의할 때 입력값을 기술한 것을 `파라미터` 라고함.
     *
     *  1. 함수의 정의
     *  함수는 fun 키워드로 정의하며 값을 입력받아 사용할 수 있는데, 이 때 입력될 값을 기술하는 것을 Parameter 라고 한다.
     *
     *  기본 형태
     *  fun 함수이름 (파라미터 이름 : 타입) : 반환 타입 {
     *      return 값
     *  }
     *  자바와 차이점
     *  자바는 함수는 없고 클래스 안에서 메소드 형태로만 존재
     *  네임드 파라미터, 디폴트 파라미터가 없음. 코틀린은 추가로 확장 함수가 있다.
     *
     * 함수의 괄호 안에 입력되는 '파라미터 이름: 타입' 에 따라, 함수를 호출할 때 괄호 안에 값을 넣어서 전달하는데
     * 이 때 입력되는 값의 타입은 함수에 정의된 타입과 동일하게 입력해야 함. <-- 자바와 동일한점1
     */

    // ex1
    fun add(a: Int, b: Int): Int {
        return a + b
    }
    println(add(1, 2))


    /*
     ** 1) 반환값과 입력값이 있는 함수의 정의.
     * Int 타입의 x 라는 입력 파라미터를 갖는 함수 square() 를 정의.
     *
     *  * 반환 타입이 있는데 안적어 주면 오류뜸
     *  * 파라미터도 타입 안적어 주면 오류뜸
     */
    fun square(x: Int): Int {
        return x * x
    }
    // square() 함수가 호출 되면 입력값을 제곱해서 호출한 쪽으로 반환하고 실행 종료.
    println(square(5)) // 25
    // 키워드 함수명(파마미터: 타입명):반환타입 {
    //        실행코드
    // }
    // 형 추론이 필수 이기 때문에 입력/출력 타입을 다 명시해야된다.

    // 반환 값이 없는 함수를 정의 하고 싶다면?
    /**
     * 2) 반환값이 없는 함수의 정의
     * 반환값 없이 입력값을 받아서 출력하는 함수 printSum() 함수를 정의.
     * printSum() 함수가 호출되면 결과값을 출력하고 실행 종료.
     */
    fun printSum(x: Int, y: Int) {
        println("x + y = ${x + y}")
    }
    // println() 은 반환 값이 아님 콘솔로 바로 출력함
    printSum(3, 4) // x + y = 7

    /**
     *  3) 입력값 없이 반환값만 있는 함수의 정의
     */
    fun getPi(): Double {
        return 3.14
    }
    println(getPi()) // 3.14

    // **

    /**
     * 2. 함수의 사용 (호출)
     * 함수의 사용은 이름 뒤에 괄호를 붙여서 명령어를 실행하는 형태
     *
     * 함수명(값)
     *
     * 함수는 이름만 호출해서는 실행되지 앟ㄴ고 반드시 괄호를 붙여야 실행
     * 함수의 사용은 이름 뒤에 괄호를 붙여서 명령어를 실행하는 형태.
     * 괄고를 붙이지 않으면 함수의 코드가 실행되지 않고 값처럼 인식
     */

    /**
     * 2-1) 반환값과 입력값이 있는 함수의 호출
     * 파라미터에 전달할 값을 입력하고 반환값은 대입 연산자(=)를 변수에 담은 후 사용.
     *
     */
    val squareResult = square(30)
    // 여러 번 사용할 필요가 있는 경우
    println("30의 제곱은 $squareResult 입니다.")

    // 작업中 한번한 사용하고 말거면 바로 호출하는 아래방식으로 사용
    println("40의 제곱은 ${square(40)} 입니다.")

    /**
     * 2-2) 반환값이 없는 함수의 호출
     * 반환값이 없으면 대입 연산자(=)를 사용하지 않고 바로 호출해서 실행.
     */
    printSum(3, 5)

    /**
     * 2-3) 입력값이 없는 함수의 호출
     * 입력값이 없다면 괄호만으로 실행하고 결과값을 받을 수 있음.
     */
    val PI = getPi()
    println("지름이 10인 원의 둘레는 ${PI * 10}입니다.")
}